/*
 * Copyright (c) 2017 Villu Ruusmann
 *
 * This file is part of JPMML-SkLearn
 *
 * JPMML-SkLearn is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JPMML-SkLearn is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with JPMML-SkLearn.  If not, see <http://www.gnu.org/licenses/>.
 */
options {
	JAVA_TEMPLATE_TYPE = "modern";
	JDK_VERSION = "1.5";
	STATIC = false;
}

PARSER_BEGIN(ExpressionTranslator)
package org.jpmml.sklearn;

import java.util.ArrayList;
import java.util.List;

import org.dmg.pmml.Apply;
import org.dmg.pmml.Constant;
import org.dmg.pmml.DataType;
import org.dmg.pmml.Expression;
import org.dmg.pmml.FieldName;
import org.dmg.pmml.FieldRef;
import org.jpmml.converter.Feature;
import org.jpmml.converter.visitors.ExpressionCompactor;

public class ExpressionTranslator extends AbstractTranslator {

	static
	public Expression translate(String string, List<? extends Feature> features){
		return translate(string, features, true);
	}

	static
	public Expression translate(String string, List<? extends Feature> features, boolean compact){
		Expression expression;
		
		try {
			ExpressionTranslator expressionTranslator = new ExpressionTranslator(string);
			expressionTranslator.setFeatures(features);

			expression = expressionTranslator.translateExpressionInternal();
		} catch(ParseException pe){
			throw new IllegalArgumentException("Python expression \'" + string + "\' is either invalid or not supported", pe);
		}

		if(compact){
			ExpressionCompactor compactor = new ExpressionCompactor();

			compactor.applyTo(expression);
		}

		return expression;
	}

	static
	private String translateRelationalOperator(Token operator){
		
		switch(operator.kind){
			case EQUAL:
				return "equal";
			case NOT_EQUAL:
				return "notEqual";
			case LESS_THAN:
				return "lessThan";
			case LESS_OR_EQUAL:
				return "lessOrEqual";
			case GREATER_THAN:
				return "greaterThan";
			case GREATER_OR_EQUAL:
				return "greaterOrEqual";
			default:
				throw new IllegalArgumentException(operator.image);
		}
	}

	static
	private Apply translateFunction(String function, List<Expression> arguments){

		switch(function){
			case "pandas.isnull":
				if(arguments.size() != 1){
					throw new IllegalArgumentException();
				}
				return createApply("isMissing", arguments.get(0));
			case "pandas.notnull":
				if(arguments.size() != 1){
					throw new IllegalArgumentException();
				}
				return createApply("isNotMissing", arguments.get(0));
			default:
				throw new IllegalArgumentException(function);
		}
	}

	static
	private String translateValue(Token value){
		String image = value.image;

		switch(value.kind){
			case FALSE:
			case TRUE:
				image = image.toLowerCase();
				break;
			case INT:
				if(image.endsWith("l") || image.endsWith("L")){
					image = image.substring(0, image.length() - 1);
				}
				break;
			case STRING:
				image = image.substring(1, image.length() - 1);
				break;
			default:
				break;
		}

		return image;
	}

	static
	private Apply createApply(String function, Expression... expressions){
		Apply apply = new Apply(function);
		
		for(Expression expression : expressions){
			apply.addExpressions(expression);
		}
		
		return apply;
	}
}
PARSER_END(ExpressionTranslator)

SPECIAL_TOKEN:
{
	" "
	|
	"\t"
}

TOKEN:
{
	< LPAREN: "(" >
	|
	< RPAREN: ")" >
}

TOKEN:
{
	< IF: "if">
	|
	< ELSE: "else" >
	|
	< OR: "or" >
	|
	< AND: "and" >
	|
	< NOT: "not" >
}

TOKEN:
{
	< EQUAL: "==" >
	|
	< NOT_EQUAL: "!=" >
	|
	< LESS_THAN: "<" >
	|
	< LESS_OR_EQUAL: "<=" >
	|
	< GREATER_THAN: ">" >
	|
	< GREATER_OR_EQUAL: ">=" >
}

TOKEN:
{
	< MULTIPLY: "*" >
	|
	< DIVIDE: "/" >
	|
	< PLUS: "+" >
	|
	< MINUS: "-" >
}

TOKEN:
{
	< LBRACKET: "[" >
	|
	< RBRACKET: "]" >
}

TOKEN:
{
	< COMMA: "," >
	|
	< DOT: "." >
}

TOKEN:
{
	< FALSE: "False" >
	|
	< TRUE: "True" >
}

TOKEN:
{
	< INT:
		"0"
		|
		<NONZERO_DIGIT> (<DIGIT>)* ( ["l", "L"] )?
	>
	|
	< FLOAT:
		(<DIGIT>)+ "." (<DIGIT>)* (<EXPONENT>)?
		|
		"." (<DIGIT>)+ (<EXPONENT>)?
		|
		(<DIGIT>)+ <EXPONENT>
	>
	|
	< NAME: <LETTER> (<LETTER> | <DIGIT>)* >
	|
	< STRING:
		"\"" (~["\""])* "\""
		|
		"\'" (~["\'"])* "\'"
	>
	|
	< #DIGIT: ["0" - "9"] >
	|
	< #NONZERO_DIGIT: ["1" - "9"] >
	|
	< #LETTER: ["a" - "z", "A" - "Z", "_"]>
	|
	< #EXPONENT: ["e", "E"] (["+", "-"])? (<DIGIT>)+ >
}

private Expression translateExpressionInternal():
{
	Expression expression;
}
{
	expression = Expression() <EOF>

	{
		return expression;
	}
}

Expression Expression():
{
	Expression expression;
}
{
	expression = IfElseExpression()

	{
		return expression;
	}
}

Expression IfElseExpression():
{
	Expression left;
	Expression center;
	Expression right;
}
{
	left = LogicalOrExpression() ( <IF> center = LogicalOrExpression() <ELSE> right = LogicalOrExpression() { left = createApply("if", center, left, right); } )?

	{
		return left;
	}
}

Expression LogicalOrExpression():
{
	Expression left;
	Expression right;
}
{
	left = LogicalAndExpression() ( <OR> right = LogicalAndExpression() { left = createApply("or", left, right); } )*

	{
		return left;
	}
}

Expression LogicalAndExpression():
{
	Expression left;
	Expression right;
}
{
	left = NegationExpression() ( <AND> right = NegationExpression() { left = createApply("and", left, right); } )*

	{
		return left;
	}
}

Expression NegationExpression():
{
	Token operator = null;
	Expression expression;
}
{
	( operator = <NOT> )? expression = ComparisonExpression()

	{
		if(operator != null){
			return createApply("not", expression);
		}

		return expression;
	}
}

Expression ComparisonExpression():
{
	Expression left;
	Token operator;
	Expression right;
}
{
	left = AdditiveExpression() ((operator = <EQUAL> | operator = <NOT_EQUAL> | operator = <LESS_THAN> | operator = <LESS_OR_EQUAL> | operator = <GREATER_THAN> | operator = <GREATER_OR_EQUAL>) right = AdditiveExpression() { left = createApply(translateRelationalOperator(operator), left, right); })?

	{
		return left;
	}
}

Expression AdditiveExpression():
{
	Expression left;
	Token operator;
	Expression right;
}
{
	left = MultiplicativeExpression() ((operator = <PLUS> | operator = <MINUS>) right = MultiplicativeExpression() { left = createApply(operator.image, left, right); })*

	{
		return left;
	}
}

Expression MultiplicativeExpression():
{
	Expression left;
	Token operator;
	Expression right;
}
{
	left = UnaryExpression() ((operator = <MULTIPLY> | operator = <DIVIDE>) right = UnaryExpression() { left = createApply(operator.image, left, right); })*

	{
		return left;
	}
}

Expression UnaryExpression():
{
	Token sign = null;
	Expression expression;
}
{
	(
		sign = <PLUS> expression = UnaryExpression()
		|
		sign = <MINUS> expression = UnaryExpression()
		|
		expression = PrimaryExpression()
	)

	{
		if(sign != null && sign.kind == MINUS){
			
			if(expression instanceof Constant){
				Constant constant = (Constant)expression;

				String value = constant.getValue();
				if(value.startsWith("-")){
					value = value.substring(1);
				} else
					
				{
					value = ("-" + value);
				}
				
				constant.setValue(value);
			} else

			{
				Constant constant = new Constant()
					.setValue("-1");

				expression = createApply("*", constant, expression);
			}
		}

		return expression;
	}
}

Expression PrimaryExpression():
{
	Expression expression;
}
{
	(
		LOOKAHEAD(<NAME> <LBRACKET>)
		expression = ArrayIndexingExpression()
		|
		expression = FunctionInvocationExpression()
		|
		expression = ParenthesizedExpression()
		|
		expression = LiteralExpression()
	)

	{
		return expression;
	}
}

FieldRef ArrayIndexingExpression():
{
	Token variable;
	Token column;
}
{
	(
		LOOKAHEAD(<NAME> <LBRACKET> <INT>)
		variable = <NAME> <LBRACKET> column = <INT> <RBRACKET>
		|
		variable = <NAME> <LBRACKET> column = <STRING> <RBRACKET>
	)

	{
		if(!("X").equals(variable.image)){
			throw new IllegalArgumentException(variable.image);
		}

		Feature feature;

		switch(column.kind){
			case ExpressionTranslatorConstants.INT:
				{
					int index = Integer.parseInt(column.image);

					feature = getFeature(index);
				}
				break;
			case ExpressionTranslatorConstants.STRING:
				{
					FieldName name = FieldName.create(column.image.substring(1, column.image.length() - 1));

					feature = getFeature(name);
				}
				break;
			default:
				throw new IllegalArgumentException();
		}

		return feature.ref();
	}
}

Expression FunctionInvocationExpression():
{
	Token name;
	StringBuilder function = new StringBuilder();
	List<Expression> arguments;
}
{
	name = <NAME> { function.append(name.image); } ( <DOT> name = <NAME> { function.append('.').append(name.image); })* <LPAREN> arguments = ArgumentList() <RPAREN>

	{
		return translateFunction(function.toString(), arguments);
	}
}

List<Expression> ArgumentList():
{
	Expression expression;
	List<Expression> expressions = new ArrayList<Expression>();
}
{
	expression = Expression() { expressions.add(expression); } ( <COMMA> expression = Expression() { expressions.add(expression); })*

	{
		return expressions;
	}
}

Expression ParenthesizedExpression():
{
	Expression expression;
}
{
	<LPAREN> expression = Expression() <RPAREN>

	{
		return expression;
	}
}

Constant LiteralExpression():
{
	Token value;
	DataType dataType;
}
{
	(
		value = <FALSE> { dataType = DataType.BOOLEAN; }
		|
		value = <TRUE> { dataType = DataType.BOOLEAN; }
		|
		value = <INT> { dataType = DataType.INTEGER; }
		|
		value = <FLOAT> { dataType = DataType.DOUBLE; }
		|
		value = <STRING> { dataType = DataType.STRING; }
	)

	{
		Constant constant = new Constant()
			.setValue(translateValue(value))
			.setDataType(dataType);

		return constant;
	}
}
